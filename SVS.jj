PARSER_BEGIN(SVS)

   import java.io.*;

   class SVS {

      public static void main(String[] args)
         throws ParseException, TokenMgrError
      {
         if (args.length > 0) {
            try {
               SVS scan = new SVS(new FileInputStream(args[0]));
               scan.Program().eval();
            } catch (FileNotFoundException ex) {
               System.out.println("File "+args[0]+" not found.");
            }
         } else {
            System.out.println("Must specify source code file name.");
         }
      }

   } // end class

PARSER_END(SVS)
               
SKIP : { " " | "\t" | "\n" }
TOKEN : { <INPUT : "Mic"> }
TOKEN : { <ASSIGN : "?"> }
TOKEN : { <INT : ("0" | ["1"-"9"](["0"-"9"])*)> }
TOKEN : { <OUTPUT : "Eject"> }
TOKEN : { <VB : "|"> }
TOKEN : { <LB : "["> }
TOKEN : { <RB : "]"> }
TOKEN : { <LP : "(" > }
TOKEN : { <RP : ")" > }
TOKEN : { <ID : (["A"-"Z"]| ["a"-"z"])(["a"-"z"] |["A"-"Z"] |["0"-"9"] | "_") * > }
TOKEN : { <PLUS : "+" > }
TOKEN : { <MINUS : "-" > }
TOKEN : { <MUL : "*" > }
TOKEN : { <DIV : "/" > }
               
Node Assign():
{
	Node n;
	Node c;
	Token t;
}
{
	{ n = new AssignNode(); }
	t = <ID>	{ n.addChild(new IDNode(t.image)); }
	<ASSIGN>
	c = Exp()	{ n.addChild(c); }
	<VB>

	{ return  n; }
}

Node Input():
{
	Node n;
	Token t;
}
{
	{ n = new InputNode(); }
	<INPUT>
	<LB>
	t = <ID> { n.addChild(new IDNode(t.image)); }
	<RB>
	<VB>

	{ return n; }
}

Node Output():
{
	Node n;
	Node c;
	Token t;
}
{
	{ n = new OutputNode(); }
	<OUTPUT>
	<LB>
	c = Exp()	{ n.addChild(c); }
	<RB>
	<VB>

	{ return n; }
}

Node Exp():
{
	Node n;
	Token t;
	Node c;
}
{	
	{ n = new ExpNode(); }
	c = Mexp()	{ n.addChild(c); }
	(
	t = <PLUS> 
	c = Mexp()	{ n.addChild(new OpNode(t.image)); n.addChild(c); }
	|
	t = <MINUS> 
	c = Mexp()	{ n.addChild(new OpNode(t.image)); n.addChild(c); }
	)*

	{ return n; }
}

Node Mexp():
{
        Node n;
	Node c;
	Token t;
}
{
	{ n = new ExpNode(); }
	c = Factor()	{ n.addChild(c); }        
        ( 
	t = <MUL>
	c = Factor()	{ n.addChild(new OpNode(t.image)); n.addChild(c); }
	|
	t = <DIV>
	c = Factor()	{ n.addChild(new OpNode(t.image)); n.addChild(c); }
        )*

        { return n; }
}

Node Factor():
{
	Node c;
	Token t;
}
{
	(
	t = <ID>  { return new IDNode(t.image); }
	|
	t = <INT> { return new INTNode(t.image); }
	|
	(
	<LP>
	c = Exp()
	<RP>
	)	
	)

	{ return c; }
}

Node Program():
{
	Node n;
	Node c;
}
{
	{ n = new BlockNode(); }
	(
		c = Input() { n.addChild(c); }
		|
		c = Output() { n.addChild(c); }
		|
		c = Assign() { n.addChild(c); }
	)+
	<EOF>
	{ return n; }
}
